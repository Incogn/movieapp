{"version":3,"sources":["images/react-movie-logo.svg","images/tmdb_logo.svg","components/Header/Header.styles.js","components/Header/index.js","config.js","components/HeroImage/HeroImage.styles.js","components/HeroImage/index.js","components/Grid/Grid.styles.js","components/Grid/index.js","components/Thumb/Thumb.styles.js","components/Thumb/index.js","components/Spinner/index.js","components/Spinner/Spinner.styles.js","images/search-icon.svg","components/Searchbar/Searchbar.styles.js","components/Searchbar/index.js","components/Button/Button.styles.js","components/Button/index.js","API.js","helpers.js","hooks/useHomeFetch.js","images/no_image.jpg","components/Home.js","components/BreadCrumb/BreadCrumb.styles.js","components/BreadCrumb/index.js","components/MovieInfo/MovieInfo.styles.js","components/MovieInfo/index.js","components/MovieInfoBar/MovieInfoBar.styles.js","components/MovieInfoBar/index.js","components/Actor/Actor.styles.js","components/Actor/index.js","components/Movie.js","hooks/useMoviefetch.js","components/NotFound.js","GlobalStyle.js","App.js","index.js"],"names":["Wrapper","styled","div","Content","LogoImg","img","TMDBLogoImg","Header","to","src","RMDBLogo","alt","TMDBLogo","API_URL","API_KEY","process","SEARCH_BASE_URL","POPULAR_BASE_URL","REQUEST_TOKEN_URL","LOGIN_URL","SESSION_ID_URL","IMAGE_BASE_URL","BACKDROP_SIZE","POSTER_SIZE","image","Text","HeroImage","title","text","Grid","header","children","Image","Thumb","movieId","clickable","Spinner","Searchbar","setSearchTerm","useState","state","setState","initial","useRef","useEffect","current","timer","setTimeout","clearTimeout","searchIcon","type","placeholder","onChange","event","currentTarget","value","button","Button","callback","onClick","defaultConfig","method","headers","apiSettings","fetchMovies","searchTerm","page","a","endpoint","fetch","json","fetchMovie","fetchCredits","creditsEndpoint","getRequestToken","reqToken","request_token","authenticate","requestToken","username","password","bodyData","body","JSON","stringify","success","sessionId","rateMovie","rating","calcTime","time","hours","Math","floor","mins","convertMoney","money","Intl","NumberFormat","style","currency","minimumFractionDigits","format","initialState","results","total_pages","total_results","useHomeFetch","loading","setLoading","error","setError","isLoadingMore","setIsLoadingMore","API","movies","prev","sessionState","stateName","sessionStorage","getItem","parse","isPersistedState","console","log","setItem","Home","backdrop_path","original_title","overview","map","movie","poster_path","NoImage","id","BreadCrumb","movieTitle","backdrop","MovieInfo","className","vote_average","directors","length","director","name","credit_id","MovieInfoBar","budget","revenue","Actor","character","imageUrl","Movie","credits","crew","filter","member","job","actors","cast","useMovieFetch","useParams","runtime","actor","profile_path","NotFound","GlobalStyle","createGlobalStyle","App","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6fd02915.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/react-movie-logo.42955eb6.svg\";","export default __webpack_public_path__ + \"static/media/tmdb_logo.f15b6632.svg\";","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n    background : var(--darkGrey);\n    padding: 0 20px;\n`;\n\nexport const Content = styled.div`\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      max-width: var(--maxWidth);\n      padding: 20px 0;\n      margin: 0 auto;\n`;\n\nexport const LogoImg = styled.img`\n       width: 200px;\n\n   @media screen and (max-width:500px){\n       width: 150px;\n   }\n`;\n\nexport const TMDBLogoImg = styled.img`\n    width: 100px;\n\n    @media screen and (max-width: 500px){\n        width: 80px;\n    }\n`;","import React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport RMDBLogo from '../../images/react-movie-logo.svg';\nimport TMDBLogo from '../../images/tmdb_logo.svg';\n\nimport { Wrapper, Content, LogoImg, TMDBLogoImg } from './Header.styles';\n\nconst Header=()=>(\n   <Wrapper>\n       <Content>\n           <Link to = '/'>\n           <LogoImg src={RMDBLogo} alt='rmdb-logo'/>\n           </Link>\n           <TMDBLogoImg src = {TMDBLogo} alt='tmdb-logo'/>\n       </Content>\n   </Wrapper>\n);\n\nexport default Header;","// Configuration for TMDB API\n// Read more about the API here: https://developers.themoviedb.org/\n\nconst API_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\nconst SEARCH_BASE_URL = `${API_URL}search/movie?api_key=${API_KEY}&language=en-US&query=`;\nconst POPULAR_BASE_URL = `${API_URL}movie/popular?api_key=${API_KEY}&language=en-US`;\n// For login and voting\nconst REQUEST_TOKEN_URL = `${API_URL}authentication/token/new?api_key=${API_KEY}`;\nconst LOGIN_URL = `${API_URL}authentication/token/validate_with_login?api_key=${API_KEY}`;\nconst SESSION_ID_URL = `${API_URL}authentication/session/new?api_key=${API_KEY}`;\n\nconst IMAGE_BASE_URL = 'http://image.tmdb.org/t/p/';\n// Sizes: w300, w780, w1280, original\nconst BACKDROP_SIZE = 'w1280';\n// w92, w154, w185, w342, w500, w780, original\nconst POSTER_SIZE = 'w780';\n\nexport {\n  SEARCH_BASE_URL,\n  POPULAR_BASE_URL,\n  API_URL,\n  API_KEY,\n  IMAGE_BASE_URL,\n  BACKDROP_SIZE,\n  POSTER_SIZE,\n  REQUEST_TOKEN_URL,\n  LOGIN_URL,\n  SESSION_ID_URL,\n};\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\nbackground:linear-gradient(\n    to bottom,\n    rgba(0,0,0,0) 41%,\n    rgba(0,0,0,0.65) 100%\n),\nurl(${({image}) => image}), var(--darkGrey);\nbackground-size: 100%, cover;\nbackground-position: center;\nheight:600px;\nposition:relative;\nanimation: animateHeroImage 1s;\n\n@keyframes animateHeroImage{\n    from{\n        opacity:0;\n    }\n    to{\n        opacity:1;\n    }\n}\n`;\n\nexport const Content = styled.div`\npadding:20px;\nmax-width: var(--maxwidth);\nmargin: 0 auto;\n`;\n\nexport const Text = styled.div`\nz-index:100;\nmax-width:700px;\nposition:absolute;\nbottom:40px;\nmargin-right:20px;\nmin-height:100px;\ncolor:var(--white);\n\nh1{\n    font-size:var(--fontSuperBig);\n    @media screen and (max-width:720px){\n        font-size: var(--fontBig);\n\n    }\n}\np{\n    font-size: var(--fontMed);\n\n    @media screen and (max-width: 720px){\n        font-size: var(--fontSmall);\n    }\n}\n\n@media screen and (max-width: 720px){\n    max-width: 100%;\n\n}\n\n\n\n\n\n\n\n\n\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {Wrapper,Content,Text} from './HeroImage.styles';\n\n\nconst HeroImage = ({image, title,text}) =>(\n    <Wrapper image = {image}>\n        <Content>\n            <Text>\n                <h1>{title}</h1>\n                <p>{text}</p>\n            </Text>\n        </Content>\n    </Wrapper>\n);\n\nHeroImage.propTypes= {\n    image: PropTypes.string,\n    title: PropTypes.string,\n    text: PropTypes.string,\n};\n\n\nexport default HeroImage;","import styled from 'styled-components';\n\n\nexport const Wrapper = styled.div`\n    max-width: width var(--maxWidth);\n    margin: 0 auto;\n    padding: 0 20px;\n\n    h1{\n        color:var(--medGrey);\n\n        @media screen and (max-width: 768px){\n            font-size: var(--fontBig);\n    }\n}\n`;\n    \nexport const Content = styled.div`\n       display:grid;\n       grid-template-columns: repeat(auto-fill, minmax(200px,1fr));\n       grid-gap: 2rem;\n`;","import react from 'react';\nimport PropTypes from 'prop-types';\n\n\nimport{ Wrapper,Content}  from './Grid.styles';\n\nconst Grid = ({ header, children }) =>(\n    <Wrapper>\n        <h1>{header}</h1>\n        <Content>{children}</Content>\n    </Wrapper>\n);\n\nGrid.propTypes={\n    header: PropTypes.string\n};\nexport default Grid;","import styled from 'styled-components';\n\nexport const Image = styled.img`\n        width : 100%;\n        max-width: 720px;\n        transition: all 0.3s;\n        object-fit: cover;\n        border-radius: 20px;\n        animation: animateThumb 0.5s;\n\n        :hover{\n            opacity: 0.8;\n        }\n       @keyframes animateThumb{\n           from{\n               opacity: 0;\n           }\n           to{\n               opacity:1;\n           }\n       }\n        `;\n\n\n\n\n\n\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {Link} from 'react-router-dom';\n\n\nimport {Image} from './Thumb.styles';\n\nconst Thumb =  ({ image, movieId, clickable }) =>(\n      <div>\n          {clickable ? (\n              <Link to ={`/${movieId}`} >\n                  <Image src = {image} alt='movie-thumb' />\n\n              </Link>\n          ):(\n          <Image src = {image} alt='movie-thumb'/>\n          )}\n      </div>\n);\n\nThumb.propTypes={\n    image: PropTypes.string,\n    movieId: PropTypes.number,\n    clickable: PropTypes.bool,\n};\n\nexport default Thumb;","import  {Spinner} from './Spinner.styles';\n\nexport default Spinner;\n","import styled from 'styled-components';\n\nexport const Spinner = styled.div`\n       border: 5px solid var(--lightGrey);\n       border-top: 5px solid var(--medGrey);\n       border-radius: 50%;\n       width:50px;\n       height:50px;\n       animation: spin 0.8s linear infinite;\n       margin: 20px auto;\n\n       @keyframes spin{\n           0%{\n               transform: rotate(0deg);\n           }\n           100%{\n               transform: rotate(360deg);\n           }\n        }\n    ;`\n\n\n\n\n\n\n\n\n","export default __webpack_public_path__ + \"static/media/search-icon.cd820f5a.svg\";","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n        display: flex;\n        align-items: center;\n        height: 100px;\n        background: var(--darkGrey);\n        padding: 0, 20px;\n    `;\n\n\n\n\n\nexport const Content = styled.div`\n       position:relative;\n       max-width: var(--maxWidth);\n       width: 100%;\n       height: 55px;\n       background: var(--medGrey);\n       margin: 0 auto;\n       border-radius: 40px;\n       color: var(--white);\n\n       img{\n           position:absolute;\n           left: 15px;\n           top: 14px;\n           width: 30px;\n       }\n       input{\n           font-size: var(--fontBig);\n           position:absolute;\n           left: 0;\n           margin: 8px 0;\n           padding: 0 0 0 60px;\n           border: 0;\n           width: 95%;\n           background: transparent;\n           height: 40px;\n           color: var(--white);\n\n           :focus{\n               outline:none;\n           }\n        }\n\n\n\n\n\n       \n`;\n\n\n\n\n\n\n\n\n\n","import React,{useState, useEffect, useRef}  from 'react';\nimport PropTypes from 'prop-types';\n\nimport searchIcon from '../../images/search-icon.svg';\n\nimport {Wrapper,Content} from './Searchbar.styles';\n\nconst Searchbar = ({ setSearchTerm }) =>{\n     const [state, setState] = useState('');\n     const initial = useRef(true);\n\n     useEffect(() => {\n         if (initial.current) {\n             initial.current = false;\n             return;\n         }\n\n        const timer = setTimeout (() => {\n            setSearchTerm(state);\n        }, 500)\n\n        return() => clearTimeout(timer)\n    }, [setSearchTerm, state])\n\n\n    return(\n        <Wrapper>\n            <Content>\n                <img src={searchIcon} alt='search-icon'/>\n                <input\n                type='text'\n                placeholder= 'Search Movie'\n                onChange = {event => setState(event.currentTarget.value)}\n                value={state}\n                />\n            </Content>\n        </Wrapper>\n    );\n};\n Searchbar.propTypes ={\n     callback: PropTypes.func\n };\n\n\nexport default Searchbar;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.button`\n   display:block;\n   background: var(--darkGrey);\n   width: 25%;\n   min-width:200px;\n   height: 60px;\n   border-radius: 30px;\n   color: var(--white);\n   border:0;\n   font-size: var(--fontBig);\n   margin: 20px auto;\n   transition: all 0.3s;\n   outline: none;\n   cursor: pointer;\n\n\n   :hover{\n       opacity: 0.8s\n\n   }\n\n\n\n\n\n\n\n\n\n\n\n\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {Wrapper} from './Button.styles';\n\nconst Button = ({ text, callback }) => (\n    <Wrapper type = 'button' onClick = {callback}>\n        {text}\n    </Wrapper>\n);\n\nButton.propTypes={\n    text: PropTypes.string,\n    callback: PropTypes.func,\n\n}\n\nexport default Button;\n","import {\n  SEARCH_BASE_URL,\n  POPULAR_BASE_URL,\n  API_URL,\n  API_KEY,\n  REQUEST_TOKEN_URL,\n  LOGIN_URL,\n  SESSION_ID_URL\n} from './config';\n\nconst defaultConfig = {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n};\n\nconst apiSettings = {\n  fetchMovies: async (searchTerm, page) => {\n    const endpoint = searchTerm\n      ? `${SEARCH_BASE_URL}${searchTerm}&page=${page}`\n      : `${POPULAR_BASE_URL}&page=${page}`;\n    return await (await fetch(endpoint)).json();\n  },\n  fetchMovie: async movieId => {\n    const endpoint = `${API_URL}movie/${movieId}?api_key=${API_KEY}`;\n    return await (await fetch(endpoint)).json();\n  },\n  fetchCredits: async movieId => {\n    const creditsEndpoint = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\n    return await (await fetch(creditsEndpoint)).json();\n  },\n  // Bonus material below for login\n  getRequestToken: async () => {\n    const reqToken = await (await fetch(REQUEST_TOKEN_URL)).json();\n    return reqToken.request_token;\n  },\n  authenticate: async (requestToken, username, password) => {\n    const bodyData = {\n      username,\n      password,\n      request_token: requestToken\n    };\n    // First authenticate the requestToken\n    const data = await (\n      await fetch(LOGIN_URL, {\n        ...defaultConfig,\n        body: JSON.stringify(bodyData)\n      })\n    ).json();\n    // Then get the sessionId with the requestToken\n    if (data.success) {\n      const sessionId = await (\n        await fetch(SESSION_ID_URL, {\n          ...defaultConfig,\n          body: JSON.stringify({ request_token: requestToken })\n        })\n      ).json();\n      return sessionId;\n    }\n  },\n  rateMovie: async (sessionId, movieId, value) => {\n    const endpoint = `${API_URL}movie/${movieId}/rating?api_key=${API_KEY}&session_id=${sessionId}`;\n\n    const rating = await (\n      await fetch(endpoint, {\n        ...defaultConfig,\n        body: JSON.stringify({ value })\n      })\n    ).json();\n\n    return rating;\n  }\n};\n\nexport default apiSettings;\n","// Convert time to hours and minutes\nexport const calcTime = time => {\n  const hours = Math.floor(time / 60);\n  const mins = time % 60;\n  return `${hours}h ${mins}m`;\n};\n// Convert a number to money formatting\nexport const convertMoney = money => {\n  const formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0,\n  });\n  return formatter.format(money);\n};\nexport const isPersistedState=stateName => {\n  const sessionState = sessionStorage.getItem(stateName);\n  return sessionState && JSON.parse(sessionState);\n};\n","import { useState, useEffect, useRef } from 'react';\n\nimport API from '../API';\n\nimport {isPersistedState} from '../helpers';\n\n\nconst initialState = {\n    page:0,\n    results:[],\n    total_pages: 0,\n    total_results: 0\n};\n\n\nexport const useHomeFetch = ()  =>{\n    const [searchTerm, setSearchTerm] = useState('');\n    const [state, setState] = useState(initialState);\n    const[loading, setLoading] = useState(false);\n    const [error,setError] = useState(false);\n    const [isLoadingMore, setIsLoadingMore] = useState(false);\n\n  \n\n    const fetchMovies = async (page, searchTerm = '') => {\n          try{\n              setError(false);\n              setLoading(true);\n\n              const movies = await API.fetchMovies(searchTerm, page);\n            //   console.log(movies);\n\n            setState(prev => ({\n                ...movies,\n                results:\n                page > 1 ? [...prev.results, ...movies.results]:[...movies.results]\n             }));\n          } catch(error){\n              setError(true);\n          }\n          setLoading(false);\n    };\n\n    useEffect(() => {\n        if(!searchTerm){\n            const sessionState = isPersistedState('homeState');\n\n            if (sessionState){\n                console.log('Grabbing from sessionStorage')\n                setState(sessionState);\n                return;\n            }\n        }\n\n        console.log('Grabbing from API');\n        setState(initialState);\n        fetchMovies(1,searchTerm);\n    }, [searchTerm]);\n\n\n    useEffect(() => {\n        if (!isLoadingMore) return;\n\n        fetchMovies(state.page + 1, searchTerm);\n        setIsLoadingMore(false);\n        }, [isLoadingMore, searchTerm, state.page]);\n\n        //write to sessionStorage\n        useEffect(()=>{\n            if(!searchTerm) sessionStorage.setItem('homeState', JSON.stringify(state))\n        },[searchTerm, state]);\n\n\n\n\n\n    return{state, loading, error, searchTerm, setSearchTerm, setIsLoadingMore};\n\n};","export default __webpack_public_path__ + \"static/media/no_image.22d2aa4d.jpg\";","import React from 'react';\n\n\nimport{ POSTER_SIZE, BACKDROP_SIZE, IMAGE_BASE_URL} from '../config';\n\nimport HeroImage from './HeroImage';\nimport Grid from  './Grid';\nimport Thumb from'./Thumb';\nimport Spinner from './Spinner';\nimport Searchbar from './Searchbar';\nimport Button from './Button';\n\n\nimport { useHomeFetch } from '../hooks/useHomeFetch';\n\nimport NoImage from '../images/no_image.jpg';\n\nconst Home = () => {\n    const{ \n           state,\n           loading, \n           error,\n           searchTerm, \n           setSearchTerm, \n           setIsLoadingMore\n           } = useHomeFetch();\n\n    console.log(state);\n\n    if (error) return <div> Something went wrong...</div>\n   \n    return(\n        <>\n        {!searchTerm && state.results[0]?(\n        <HeroImage\n           image = {`${IMAGE_BASE_URL}${BACKDROP_SIZE}${state.results[0].backdrop_path}`}\n           title={state.results[0].original_title}\n           text={state.results[0].overview}\n        />\n    ):null}\n    <Searchbar setSearchTerm={setSearchTerm}/>\n    <Grid header = {searchTerm ? 'search Result' : 'Popular Movies'}>\n       {state.results.map(movie => (\n           <Thumb\n           key={movie.id}\n           clickable\n           image={\n               movie.poster_path\n               ? IMAGE_BASE_URL + POSTER_SIZE + movie.poster_path\n               :NoImage\n            }\n            movieId={movie.id}\n        />\n       ))} \n    </Grid>\n    {loading && <Spinner/>}\n    {state.page < state.total_pages && !loading && (\n        <Button text = 'Load More' callback= {() => setIsLoadingMore(true)}/>\n    )}\n\n    </>\n    ) ;\n  };\n   \n\n\nexport default Home;","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\ndisplay:flex;\nalign-items: center;\njustify-content: center;\nwidth: 100%;\nheight:70px;\nbackground: var(--medGrey);\ncolor: var(--white);\n`;\n\nexport const Content = styled.div`\ndisplay: flex;\nwidth: 100%;\nmax-width: var(--maxWidth);\npadding: 0 20px;\n\nspan{\n    font-size: var(--fontMed);\n    color:var(--white);\n    padding-right: 10px;\n\n    @media screen and (max-width: 768px){\n        font-size: var(--fontSmall);\n\n    }\n}\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {Link} from 'react-router-dom';\n\nimport {Wrapper, Content } from './BreadCrumb.styles';\n\nconst BreadCrumb = ({movieTitle}) => (\n    <Wrapper>\n        <Content>\n            <Link to = '/'>\n                <span>Home</span>\n            </Link>\n            <span>|</span>\n            <span>{movieTitle}</span>\n        </Content>\n    </Wrapper>\n);\n\nBreadCrumb.propTypes={\n    movieTitle:PropTypes.string\n}\n\nexport default BreadCrumb;\n","import styled from 'styled-components';\n\nimport { IMAGE_BASE_URL, BACKDROP_SIZE } from '../../config';\n\nexport const Wrapper = styled.div`\nbackground: ${({ backdrop }) =>\n        backdrop ? `url(${IMAGE_BASE_URL}${BACKDROP_SIZE}${backdrop})` : '#000'};\n        background-size: cover;\n        background-position: center;\n        padding: 40px 20px;\n        animation: animateMovieInfo 1s;\n\n        @keyframes animatedBreadCrumbs {\n            from {\n                opacity:0;\n            }\n            to{\n                opacity:1;\n            }\n        }\n`;\n\n\nexport const Content = styled.div`\ndisplay:flex;\nmax-width: var(--maxWidth);\nmargin: 0 auto;\nbackground: rgba (0,0,0,0.7);\nborder-radius: 20px;\n\n@media screen and (max-width: 768px){\n    display: block;\n    max-height: none;\n}\n`;\nexport const Text = styled.div`\n width: 100%;\n padding: 20px 40px;\n color: var(--white);\n overflow: hidden;\n background-color: #000;\n opacity: 0.8;\n\n .rating-directors{\n     display:flex;\n     justify-content: flex-start;\n }\n .score{\n     display:flex;\n     align-items: center;\n     justify-content: center;\n     width: 35px;\n     height: 35px;\n     background: #fff;\n     color: #000;\n     font-weight: 800;\n     border-radius: 50%;\n     margin:0\n}\n.directors{\n    margin: 0 0 0  40px;\n\n    p{\n        margin:0;\n\n    }\n\n}\nh1{\n    @media screen and (max-width: 768px){\n        font-size: var(--fontBig);\n    }\n}\n\n\n`;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import react from 'react';\nimport PropTypes from 'prop-types' ;\n\nimport Thumb from '../Thumb';\n\nimport {IMAGE_BASE_URL, POSTER_SIZE} from '../../config';\n\nimport NoImage from '../../images/no_image.jpg';\n\nimport {Wrapper, Content, Text} from './MovieInfo.styles';\nimport Movie from '../Movie';\n\nconst MovieInfo = ({movie})=>(\n    <Wrapper backdrop = {movie.backdrop_path}>\n        <Content>\n            <Thumb\n             image={\n                 movie.poster_path\n                 ? `${IMAGE_BASE_URL}${POSTER_SIZE}${movie.poster_path}`\n                 : NoImage\n             }\n             clickable={false}\n             />\n             <Text>\n                 <h1>{movie.title}</h1>\n                 <h3> PLOT </h3>\n                 <p>{movie.overview}</p>\n\n                 <div className=\"rating-directors\">\n                     <div>\n                         <h3>RATING</h3>\n                         <div className =\"score\">{movie.vote_average}</div>\n                         </div>\n                         <div className = \"director\">\n                    <h3>DIRECTOR{movie.directors.length>1 ? 'S': '' }</h3>\n                    {movie.directors.map(director=>(\n                        <p key={director.credit_id}>{director.name}</p>\n                    ))}\n                 </div>\n                </div>\n\n\n             </Text>\n        </Content>\n    </Wrapper>\n\n);\n\nMovieInfo.propTypes={\n    movie: PropTypes.object\n}\nexport default MovieInfo;\n\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n       display:flex;\n       align-items: center;\n       min-height: 100px;\n       background: var(--darkGrey);\n       padding: 0 20px;\n`;\n\nexport const Content = styled.div`\ndisplay:flex;\nmax-width: var(--maxWidth);\nwidth: 100%;\nmargin: 0 auto;\n\n.column{\n    display:flex;\n    align-items: center;\n    justify-content: center;\n    background: var(--medGrey);\n    border-radius: 20px;\n    margin: 0 20px;\n    flex:1;\n\n\n    :first-child{\n        margin-left: 0;\n    }\n\n    :last-child{\n        margin-right:0;\n\n    }\n\n}\n\n@media screen and (max-width: 768px){\n    display:block;\n\n.column{\n    margin: 20px 0;\n    \n}\n}\n\n\n\n\n`;\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\n\nimport { calcTime, convertMoney } from '../../helpers';\n\n\nimport { Wrapper, Content } from './MovieInfoBar.styles';\n\nconst MovieInfoBar = ({ time, budget, revenue }) => (\n    <Wrapper>\n        <Content>\n            <div className='column'>\n                <p> Running time: {calcTime(time)}</p>\n            </div>\n            <div className='column'>\n                <p> Budget: {convertMoney(budget)}</p>\n            </div>\n            <div className='column'>\n                <p> Revenue: {convertMoney(revenue)}</p>\n            </div>\n\n        </Content>\n    </Wrapper>\n);\nMovieInfoBar.propTypes = {\n    time: PropTypes.number,\n    budget: PropTypes.number,\n    revenue: PropTypes.number,\n\n};\n\n\nexport default MovieInfoBar;","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n       color:var(--white);\n       background: var(--darkGrey);\n       border-radius:20px;\n       padding:5px;\n       text-align:center;\n\n       h3{\n           margin: 10px 0 0 0;\n       }\n       p{\n           margin: 5px 0;\n       }\n`;\n\nexport const Image = styled.img`\ndisplay:block;\nwidth: 100%;\nheight: 200px;\nobject-fit: cover;\nborder-radius: 15px;\n`;\n\n\n\n\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n\n\n\nimport {Wrapper,Image } from './Actor.styles';\n\nconst Actor = ({ name, character, imageUrl }) =>(\n    <Wrapper>\n        <Image src={imageUrl} alt='actor-thumb' />\n        <h3>{name}</h3>\n        <p>{character}</p>\n    </Wrapper>\n);\n\nActor.propTypes={\n    name: PropTypes.string,\n    character:PropTypes.string,\n    imageUrl:PropTypes.string,\n\n}\nexport default Actor; ","import React from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { IMAGE_BASE_URL, POSTER_SIZE } from '../config';\n\nimport BreadCrumb from './BreadCrumb';\nimport Grid from './Grid';\nimport Spinner from './Spinner';\nimport MovieInfo from './MovieInfo';\nimport MovieInfoBar from './MovieInfoBar';\nimport Actor from './Actor';\n\n\n\nimport { useMovieFetch } from '../hooks/useMoviefetch';\n\n\nimport NoImage from '../images/no_image.jpg';\n\n\nconst Movie = () => {\n\n    const { movieId } = useParams();\n    const { state: movie, loading, error } = useMovieFetch(movieId);\n\n    if (loading) return <Spinner />;\n    if (error) return <div>Something went wrong ...</div>\n\n    return (\n        <>\n            <BreadCrumb movieTitle={movie.original_title} />\n            <MovieInfo movie={movie}/>\n            <MovieInfoBar\n             time={movie.runtime}\n             budget={movie.budget}\n             revenue={movie.revenue}\n            />\n            <Grid header='Actors'>\n                {movie.actors.map(actor => (\n                    <Actor\n                    key={actor.credit_id}\n                    name={actor.name}\n                    character={actor.character}\n                    imageUrl={\n                        actor.profile_path\n                        ? `${IMAGE_BASE_URL}${POSTER_SIZE}${actor.profile_path}`\n                        :NoImage\n                    }\n                    />\n\n                ))};\n            </Grid>\n\n        </>\n    );\n};\n\nexport default Movie;\n\n","import { useState, useEffect, useCallback } from 'react';\nimport API from '../API';\nimport { isPersistedState } from '../helpers';\n\n\nexport const useMovieFetch = movieId => {\n    const [state, setState] = useState({});\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(false);\n\n    useEffect(() => {\n        const fetchMovie = async () => {\n            try {\n                setLoading(true);\n                setError(false);\n\n                const movie = await API.fetchMovie(movieId);\n                const credits = await API.fetchCredits(movieId);\n\n                const directors = credits.crew.filter(\n                    member => member.job === 'Director'\n                );\n\n                setState({\n                    ...movie,\n                    actors: credits.cast,\n                    directors\n                });\n                setLoading(false);\n            } catch (error) {\n                setError(true);\n            }\n        };\n\n        // const sessionState = isPersistedState(movieId);\n\n        // if (sessionState) {\n        //     setState(sessionState);\n        //     setLoading(false);\n        //     return;\n        // }\n\n        fetchMovie();\n    }, [movieId]);\n\n\n    // useEffect(() => {\n    //     sessionStorage.setItem(movieId, JSON.stringify(state))\n    // }, [movieId, state])\n\n\n    return { state, loading, error };\n};\n\n\n","import React from 'react';\n\nconst NotFound = () => <div>Movie</div>;\n\nexport default NotFound;\n","import{ createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\n :root{\n     --maxWidth: 1280px;\n     --white: #fff;\n     --lightGrey: #eee;\n     --medGrey: #353535;\n     --darkGrey: #1c1c1c;\n     --fontSuperBig: 2.5rem;\n     --fontBig: 1.5rem;\n     --fontMed: 1.2rem;\n     --fontSmall: 1rem;\n}\n\n* {\n    box-sizing: border-box;\n    font-family: 'Abel', sans-serif;\n}\nbody{\n    margin:0;\n    padding:0;\n\nh1{\n    font-size: 2rem;\n    font-weight: 600;\n    color: var(--white);\n}\nh3{\n    font-size: 1.1rem;\n    font-weight: 600;\n}\n\np {\n    font-size:1rem;\n    color: var(--white);\n  }\n}\n`;","import React from 'react';\n\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport Header from './components/Header';\nimport Home from './components/Home';\nimport Movie from './components/Movie';\nimport NotFound from './components/NotFound';\n\nimport { GlobalStyle } from './GlobalStyle';\n\nconst App = () => (\n  <Router>\n    <Header />\n    <Routes>\n      <Routes path='/' element={<Home />} />\n      <Route path='/:movieId' element={<Movie />} />\n      <Route path='/*' element={<NotFound />} />\n    </Routes>\n    <GlobalStyle />\n  </Router>\n);\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}